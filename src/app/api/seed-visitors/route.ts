// src/app/api/seed-visitors/route.ts
import { NextResponse } from 'next/server';
// Import your actual server actions
import {
  createIndividualVisitor,
  createGroupVisitor,
} from '@/lib/serverActions/visitors/create/CreateVisitorActions';
import { faker } from '@faker-js/faker';

// In a real Next.js application, getServerSession would provide the session.
// For a standalone seeding script like this API route, you might mock it or ensure
// your server actions don't strictly require session for this specific use case,
// or you could pass a hardcoded resident_id.
// Assuming your server actions handle authentication internally based on context.
// const mockSession = {
//   user: {
//     id: 18, // Assuming a resident user with ID 1 exists in your database for seeding
//     username: 'jalpuche1',
//     role: 'resident',
//   },
// };

// Mock the sendEmail function to redirect all emails
// Your actual server actions should handle email sending, but this mock remains
// if your server actions allow passing a custom sendEmail function for testing/seeding.
// const sendEmail = async (to: string, qrCodeUrl: string, type: string) => {
//   console.log(`--- MOCK EMAIL SEND ---`);
//   console.log(`To: jalpuche@mail.sib.org.bz`); // All emails redirected
//   console.log(`Subject: Your Visitor QR Code for Gate Community`);
//   console.log(`Type: ${type}`);
//   console.log(`QR Code URL: ${qrCodeUrl}`);
//   console.log(`-----------------------`);
//   return { status: 200, message: 'Email sent successfully (mocked).' };
// };

export async function POST() {
  return NextResponse.json("hello world");

  // try {
  //   const schedules = [];
  //   const residentId = mockSession.user.id; // Use the resident ID from the mock session

  //   // Helper to generate a random future date
  //   const getRandomFutureDate = () => {
  //     const today = new Date();
  //     // Generates a date up to 1 year in the future
  //     const futureDate = faker.date.future({ years: 1, refDate: today });
  //     return futureDate;
  //   };

  //   // Common data for all visitors to reduce repetition
  //   const commonVisitorData = {
  //     resident_id: residentId,
  //     visitor_phone: faker.phone.number(), // This should work for faker-js v9.8.0
  //     visitor_email: 'jalpuche@mail.sib.org.bz', // All emails redirected to this address
  //     status: 'approved',
  //     license_plate: faker.vehicle.vrm(), // Correct method for Vehicle Registration Mark
  //     comments: 'Generated by seed script',
  //     sg_type: 1, // Assuming a default security group type
  //   };

  //   console.log('Starting visitor data seeding...');

  //   // 2 individual one-time visitor types
  //   for (let i = 0; i < 2; i++) {
  //     const entryDate = getRandomFutureDate();
  //     // Ensure exit date is after entry date
  //     const exitDate = new Date(entryDate.getTime() + 2 * 60 * 60 * 1000); // 2 hours later
  //     const result = await createIndividualVisitor({
  //       ...commonVisitorData,
  //       visitor_first_name: faker.person.firstName(),
  //       visitor_last_name: faker.person.lastName(),
  //       visitor_id_type: faker.helpers.arrayElement(['Passport', 'Driver License', 'National ID']),
  //       visitor_id_number: faker.string.uuid(), // Unique ID for each visitor
  //       visitor_type: 'one-time',
  //       visitor_entry_date: entryDate,
  //       visitor_exit_date: exitDate,
  //     });
  //     schedules.push(result);
  //     console.log(`Created individual one-time visitor: ${result.message}`);
  //   }

  //   // 3 individual recurring visitor types
  //   for (let i = 0; i < 3; i++) {
  //     const entryDate = getRandomFutureDate();
  //     // Longer duration for recurring visitors, e.g., 7 days
  //     const exitDate = new Date(entryDate.getTime() + 7 * 24 * 60 * 60 * 1000);
  //     const result = await createIndividualVisitor({
  //       ...commonVisitorData,
  //       visitor_first_name: faker.person.firstName(),
  //       visitor_last_name: faker.person.lastName(),
  //       visitor_id_type: faker.helpers.arrayElement(['Passport', 'Driver License', 'National ID']),
  //       visitor_id_number: faker.string.uuid(),
  //       visitor_type: 'recurring',
  //       visitor_entry_date: entryDate,
  //       visitor_exit_date: exitDate,
  //     });
  //     schedules.push(result);
  //     console.log(`Created individual recurring visitor: ${result.message}`);
  //   }

  //   // 6 group one-time visitor types
  //   for (let i = 0; i < 6; i++) {
  //     const entryDate = getRandomFutureDate();
  //     const exitDate = new Date(entryDate.getTime() + 3 * 60 * 60 * 1000); // 3 hours later
  //     // Generate 2 to 5 visitors for each group
  //     const visitors = Array.from({ length: faker.number.int({ min: 2, max: 5 }) }).map(() => ({
  //       visitor_first_name: faker.person.firstName(),
  //       visitor_last_name: faker.person.lastName(),
  //       visitor_id_type: faker.helpers.arrayElement(['Passport', 'Driver License', 'National ID']),
  //       visitor_id_number: faker.string.uuid(),
  //     }));
  //     const result = await createGroupVisitor({
  //       ...commonVisitorData,
  //       visitors, // Pass the array of sub-visitors
  //       visitor_type: 'one-time',
  //       visitor_entry_date: entryDate,
  //       visitor_exit_date: exitDate,
  //     });
  //     schedules.push(result);
  //     console.log(`Created group one-time visitor: ${result.message}`);
  //   }

  //   // 5 group recurring visitor types
  //   for (let i = 0; i < 5; i++) {
  //     const entryDate = getRandomFutureDate();
  //     // Longer duration for recurring groups, e.g., 30 days
  //     const exitDate = new Date(entryDate.getTime() + 30 * 24 * 60 * 60 * 1000);
  //     // Generate 2 to 7 visitors for each group
  //     const visitors = Array.from({ length: faker.number.int({ min: 2, max: 7 }) }).map(() => ({
  //       visitor_first_name: faker.person.firstName(),
  //       visitor_last_name: faker.person.lastName(),
  //       visitor_id_type: faker.helpers.arrayElement(['Passport', 'Driver License', 'National ID']),
  //       visitor_id_number: faker.string.uuid(),
  //     }));
  //     const result = await createGroupVisitor({
  //       ...commonVisitorData,
  //       visitors,
  //       visitor_type: 'recurring',
  //       visitor_entry_date: entryDate,
  //       visitor_exit_date: exitDate,
  //     });
  //     schedules.push(result);
  //     console.log(`Created group recurring visitor: ${result.message}`);
  //   }

  //   console.log('Visitor data seeding complete.');

  //   return NextResponse.json({
  //     success: true,
  //     message: `${schedules.length} visitor schedules created. All emails redirected to jalpuche@mail.sib.org.bz.`,
  //     schedules,
  //   });
  // } catch (error: any) {
  //   console.error('Error seeding visitor schedules:', error);
  //   return NextResponse.json(
  //     {
  //       success: false,
  //       message: 'Failed to seed visitor schedules: ' + error.message,
  //     },
  //     { status: 500 }
  //   );
  // }
}